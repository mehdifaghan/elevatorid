class c{STORAGE_KEY="system_settings";API_CONFIG_CATEGORY="api_config";cache=new Map;async getSetting(t){try{if(this.cache.has(t))return this.cache.get(t);const e=this.getAllSettingsFromStorage().find(s=>s.setting_key===t);return e&&this.cache.set(t,e),e||null}catch(i){return console.error("خطا در دریافت تنظیم:",i),null}}async getSettingValue(t,i){try{const e=await this.getSetting(t);if(!e||e.setting_value===null)return i;switch(e.setting_type){case"boolean":return e.setting_value==="true"||e.setting_value==="1";case"number":return Number(e.setting_value);case"json":try{return JSON.parse(e.setting_value)}catch{return i}case"string":default:return e.setting_value}}catch(e){return console.error("خطا در دریافت مقدار تنظیم:",e),i}}async saveSetting(t,i,e){try{const s=await this.getSetting(t);if(s?.is_locked)return console.warn(`تنظیم ${t} قفل شده و قابل تغییر نیست`),!1;let r;const n=e?.type||"string";switch(n){case"json":r=JSON.stringify(i);break;case"boolean":r=i?"true":"false";break;case"number":r=String(i);break;default:r=String(i)}const a={setting_key:t,setting_value:r,setting_type:n,category:e?.category||null,description:e?.description||null,is_public:e?.isPublic||!1,is_locked:e?.isLocked||!1,updated_by:e?.userId||null,updated_at:new Date().toISOString()};return s?(a.id=s.id,a.created_by=s.created_by,a.created_at=s.created_at):(a.created_by=e?.userId||null,a.created_at=new Date().toISOString()),this.saveSettingToStorage(a),this.cache.set(t,a),!0}catch(s){return console.error("خطا در ذخیره تنظیم:",s),!1}}async deleteSetting(t){try{if((await this.getSetting(t))?.is_locked)return console.warn(`تنظیم ${t} قفل شده و قابل حذف نیست`),!1;const s=this.getAllSettingsFromStorage().filter(r=>r.setting_key!==t);return localStorage.setItem(this.STORAGE_KEY,JSON.stringify(s)),this.cache.delete(t),!0}catch(i){return console.error("خطا در حذف تنظیم:",i),!1}}async getSettingsByCategory(t){try{return this.getAllSettingsFromStorage().filter(e=>e.category===t)}catch(i){return console.error("خطا در دریافت تنظیمات دسته:",i),[]}}async saveAPIConfig(t){try{return await this.saveSetting("api_base_url",t.baseUrl,{type:"string",category:this.API_CONFIG_CATEGORY,description:"آدرس پایه API",isPublic:!1,isLocked:!1,userId:t.userId}),t.apiKey&&await this.saveSetting("api_key",t.apiKey,{type:"string",category:this.API_CONFIG_CATEGORY,description:"کلید API",isPublic:!1,isLocked:!1,userId:t.userId}),t.apiSecret&&await this.saveSetting("api_secret",t.apiSecret,{type:"string",category:this.API_CONFIG_CATEGORY,description:"کلید محرمانه API",isPublic:!1,isLocked:!1,userId:t.userId}),await this.saveSetting("api_config_completed",!0,{type:"boolean",category:this.API_CONFIG_CATEGORY,description:"وضعیت تکمیل تنظیمات API",isPublic:!0,isLocked:!1,userId:t.userId}),await this.saveSetting("api_configured_at",new Date().toISOString(),{type:"string",category:this.API_CONFIG_CATEGORY,description:"زمان تنظیم API",isPublic:!1,isLocked:!1,userId:t.userId}),t.userId&&await this.saveSetting("api_configured_by",t.userId,{type:"number",category:this.API_CONFIG_CATEGORY,description:"کاربر تنظیم‌کننده API",isPublic:!1,isLocked:!1,userId:t.userId}),!0}catch(i){return console.error("خطا در ذخیره تنظیمات API:",i),!1}}async lockAPIConfig(t){try{if(!await this.getSettingValue("api_config_completed",!1))return console.warn("تنظیمات API هنوز تکمیل نشده است"),!1;const e=await this.getSettingsByCategory(this.API_CONFIG_CATEGORY);for(const s of e)if(s.setting_key){const r=await this.getSettingValue(s.setting_key);await this.saveSetting(s.setting_key,r,{type:s.setting_type,category:s.category||void 0,description:s.description||void 0,isPublic:s.is_public,isLocked:!0,userId:t})}return await this.saveSetting("api_config_locked",!0,{type:"boolean",category:this.API_CONFIG_CATEGORY,description:"وضعیت قفل تنظیمات API",isPublic:!0,isLocked:!0,userId:t}),await this.saveSetting("api_locked_at",new Date().toISOString(),{type:"string",category:this.API_CONFIG_CATEGORY,description:"زمان قفل تنظیمات API",isPublic:!1,isLocked:!0,userId:t}),this.cache.clear(),!0}catch(i){return console.error("خطا در قفل کردن تنظیمات API:",i),!1}}async unlockAPIConfig(t,i){try{if(!i)return console.warn("رمز ادمین الزامی است"),!1;const e=await this.getSettingsByCategory(this.API_CONFIG_CATEGORY);for(const s of e)if(s.setting_key){const r=await this.getSettingValue(s.setting_key);await this.saveSetting(s.setting_key,r,{type:s.setting_type,category:s.category||void 0,description:s.description||void 0,isPublic:s.is_public,isLocked:!1,userId:t})}return await this.saveSetting("api_config_locked",!1,{type:"boolean",category:this.API_CONFIG_CATEGORY,description:"وضعیت قفل تنظیمات API",isPublic:!0,isLocked:!1,userId:t}),await this.saveSetting("api_unlocked_at",new Date().toISOString(),{type:"string",category:this.API_CONFIG_CATEGORY,description:"زمان باز کردن قفل تنظیمات API",isPublic:!1,isLocked:!1,userId:t}),t&&await this.saveSetting("api_unlocked_by",t,{type:"number",category:this.API_CONFIG_CATEGORY,description:"کاربر باز کننده قفل API",isPublic:!1,isLocked:!1,userId:t}),this.cache.clear(),!0}catch(e){return console.error("خطا در باز کردن قفل تنظیمات API:",e),!1}}async isAPIConfigCompleted(){return await this.getSettingValue("api_config_completed",!1)}async isAPIConfigLocked(){return await this.getSettingValue("api_config_locked",!1)}async getAPIConfig(){try{const t=await this.getSettingValue("api_base_url");return t?{api_base_url:t,api_key:await this.getSettingValue("api_key"),api_secret:await this.getSettingValue("api_secret"),config_completed:await this.getSettingValue("api_config_completed",!1),config_locked:await this.getSettingValue("api_config_locked",!1),configured_at:await this.getSettingValue("api_configured_at"),configured_by:await this.getSettingValue("api_configured_by")}:null}catch(t){return console.error("خطا در دریافت تنظیمات API:",t),null}}getAllSettingsFromStorage(){try{const t=localStorage.getItem(this.STORAGE_KEY);return t?JSON.parse(t):[]}catch(t){return console.error("خطا در خواندن تنظیمات:",t),[]}}saveSettingToStorage(t){try{const i=this.getAllSettingsFromStorage(),e=i.findIndex(s=>s.setting_key===t.setting_key);e>=0?i[e]=t:i.push(t),localStorage.setItem(this.STORAGE_KEY,JSON.stringify(i))}catch(i){console.error("خطا در ذخیره تنظیم:",i)}}clearCache(){this.cache.clear()}async clearAllSettings(){try{return localStorage.removeItem(this.STORAGE_KEY),this.cache.clear(),!0}catch(t){return console.error("خطا در پاک کردن تنظیمات:",t),!1}}}const g=new c;export{g as s};
